@use "sass:math";

// Based on 24 columns of 30px with 18px gutter (at 113px wide)

$eleven40-grid-width:  2.6455% !default;  // The width of a column
$eleven40-grid-margin: 1.5873% !default;  // The amount of margin between columns

@mixin eleven40-container {
  padding-left: 20px;
  padding-right: 20px;
}

@mixin eleven40-row {
  margin: 0 auto;
  max-width: 1140px;
  overflow: hidden;
  width: 100%;
}

/*
  Main mixin, set the width of `$columns` columns

  Can be changed based on the width of the parent column. I.e., to create a 4-column
  <div> inside a 10-column <div> you would do the following:

      @include eleven40-column(4, false, 10);

*/
@mixin eleven40-column($columns, $last: false, $parent: 24) {
  display: inline;
  float: left;
  width: eleven40-span($columns, $parent);
  @if $last {
    margin-right: 0; }
  @else {
    margin-right: eleven40-margin($eleven40-grid-margin, $parent); }
}

@mixin eleven40-push($columns, $parent: 24) {
  margin-left: eleven40-push-margin($columns, $parent);
}

// Function to calculate width in context
@function eleven40-span($columns, $parent: 24) {
  @return math.div(($eleven40-grid-width * $columns + $eleven40-grid-margin * ($columns - 1)), ($eleven40-grid-width * $parent + $eleven40-grid-margin * ($parent - 1))) * 100%;
}

// Function to calculate margins in context
@function eleven40-margin($margin, $parent: 24) {
  @return math.div($margin, eleven40-span($parent)) * 100%;
}

// Function to calculate push in context
@function eleven40-push-margin($columns, $parent: 24) {
  @return math.div(($eleven40-grid-width * $columns + $eleven40-grid-margin * $columns), ($eleven40-grid-width * $parent + $eleven40-grid-margin * ($parent - 1))) * 100%;
}
